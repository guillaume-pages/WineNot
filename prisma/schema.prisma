generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  email         String?         @unique
  password      String?
  emailVerified DateTime?       @map("email_verified")
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  phone         String?
  status        String?
  user_id       String          @id @default(uuid())
  firstname     String
  lastname      String?
  accounts      accounts[]
  sessions      sessions[]
  users_cellars users_cellars[]
}

model cellars {
  cellar_id     String          @id @default(uuid())
  cellar_name   String?          @db.VarChar
  created_at    DateTime?       @db.Timestamp(6)
  updated_at    DateTime?       @db.Timestamp(6)
  deleted_at    DateTime?       @db.Timestamp(6)
  bottles       String[]
  users_cellars users_cellars[]
}

model bottles {
  bottle_id          String    @id @default(uuid())
  bottle_name        String    @db.VarChar
  millesime          Int
  type_of_wine       String    @db.VarChar
  size               String    @db.VarChar
  grape_varieties    Json      @db.Json
  region             String    @db.VarChar
  eye_description    String?
  nose_description   Json?     @db.Json
  mouth_description  Json?     @db.Json
  carafage           Int?
  temperature        Int?
  degree             Float?
  accompaniment      Json?     @db.Json
  media              String?
  price              Float?
  price_visibility   Int?
  global_description String?
  entry_date         DateTime  @db.Timestamp(6)
  potential_date     DateTime? @db.Timestamp(6)
  quantity           Int
  global_visibility  Int
}

model users_cellars {
  user_cellar_id String  @id @default(uuid())
  user_id        String
  cellar_id      String
  cellars        cellars @relation(fields: [cellar_id], references: [cellar_id], onDelete: NoAction, onUpdate: NoAction)
  users          users   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model accounts {
  user_id             String
  type                String?
  provider            String
  provider_account_id String
  token_type          String?
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  scope               String?
  id_token            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  account_id          String   @id @default(uuid())
  user                users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model sessions {
  user_id      String?
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  session_id   String   @id @default(uuid())
  user         users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model verification_request {
  identifier              String
  token                   String   @unique
  expires                 DateTime
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  verification_request_id String   @id @default(uuid())

  @@unique([identifier, token])
}

model customers {
  customer_id String     @id @default(uuid())
  name        String?    @db.VarChar(255)
  email       String?    @db.VarChar(255)
  image_url   String?    @db.VarChar(255)
  invoices    invoices[]
}

model invoices {
  invoice_id  String     @id @default(uuid())
  customer_id String?
  amount      Int?
  status      String?    @db.VarChar(255)
  date        DateTime?  @db.Timestamp(6)
  customers   customers? @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
}

model revenue {
  month   String @id @db.VarChar(20)
  revenue Int?
}
